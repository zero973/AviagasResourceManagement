// <auto-generated />
using System;
using ARM.DAL.ApplicationContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ARM.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241205180427_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ARM.DAL.Models.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("\"IsActual\" = true");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasFilter("\"IsActual\" = true");

                    b.HasIndex("Login", "PasswordHash")
                        .IsUnique()
                        .HasFilter("\"IsActual\" = true");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.Cabinet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cabinets");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.CabinetPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CabinetParts");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.CabinetPartCounts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CabinetPartId")
                        .HasColumnType("uuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("CabinetPartId", "TaskId")
                        .IsUnique()
                        .HasFilter("\"IsActual\" = true");

                    b.ToTable("CabinetPartCounts");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId", "TaskId")
                        .HasFilter("\"IsActual\" = true");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Passport")
                        .IsUnique()
                        .HasFilter("\"IsActual\" = true");

                    b.HasIndex("FirstName", "LastName", "Patronymic")
                        .HasFilter("\"IsActual\" = true");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.EmployeeSalary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<decimal>("SalaryForOneHour")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("\"IsActual\" = true");

                    b.ToTable("EmployeeSalaries");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.SystemTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CabinetId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CurrentPerformerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("EstimatedWorkHours")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CabinetId");

                    b.HasIndex("CurrentPerformerId");

                    b.HasIndex("Name")
                        .HasFilter("\"IsActual\" = true");

                    b.ToTable("Taks");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.TaskEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("EmployeeId", "TaskId")
                        .IsUnique();

                    b.ToTable("TaskEmployees");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.WorkedTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActual")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOverwork")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId", "TaskId")
                        .HasFilter("\"IsActual\" = true");

                    b.ToTable("WorkedTimes");
                });

            modelBuilder.Entity("ARM.DAL.Models.Security.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.AppUser", b =>
                {
                    b.HasOne("ARM.DAL.Models.Entities.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("ARM.DAL.Models.Entities.AppUser", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.CabinetPartCounts", b =>
                {
                    b.HasOne("ARM.DAL.Models.Entities.CabinetPart", "CabinetPart")
                        .WithMany("CabinetPartCounts")
                        .HasForeignKey("CabinetPartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ARM.DAL.Models.Entities.SystemTask", "LinkedTask")
                        .WithMany("CabinetPartCounts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CabinetPart");

                    b.Navigation("LinkedTask");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.Comment", b =>
                {
                    b.HasOne("ARM.DAL.Models.Entities.SystemTask", "LinkedTask")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ARM.DAL.Models.Entities.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LinkedTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.EmployeeSalary", b =>
                {
                    b.HasOne("ARM.DAL.Models.Entities.Employee", "Employee")
                        .WithOne("Salary")
                        .HasForeignKey("ARM.DAL.Models.Entities.EmployeeSalary", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.SystemTask", b =>
                {
                    b.HasOne("ARM.DAL.Models.Entities.Cabinet", "Cabinet")
                        .WithMany()
                        .HasForeignKey("CabinetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ARM.DAL.Models.Entities.Employee", "CurrentPerformer")
                        .WithMany("Tasks")
                        .HasForeignKey("CurrentPerformerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cabinet");

                    b.Navigation("CurrentPerformer");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.TaskEmployee", b =>
                {
                    b.HasOne("ARM.DAL.Models.Entities.Employee", "Employee")
                        .WithMany("TaskEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ARM.DAL.Models.Entities.SystemTask", "LinkedTask")
                        .WithMany("TaskEmployees")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("LinkedTask");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.WorkedTime", b =>
                {
                    b.HasOne("ARM.DAL.Models.Entities.SystemTask", "LinkedTask")
                        .WithMany("WorkedTimes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ARM.DAL.Models.Entities.AppUser", "User")
                        .WithMany("WorkedTimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LinkedTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("WorkedTimes");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.CabinetPart", b =>
                {
                    b.Navigation("CabinetPartCounts");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.Employee", b =>
                {
                    b.Navigation("Salary");

                    b.Navigation("TaskEmployees");

                    b.Navigation("Tasks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ARM.DAL.Models.Entities.SystemTask", b =>
                {
                    b.Navigation("CabinetPartCounts");

                    b.Navigation("Comments");

                    b.Navigation("TaskEmployees");

                    b.Navigation("WorkedTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
